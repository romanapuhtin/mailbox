{"version":3,"sources":["components/SearchBox.js","components/FolderNavigation.js","components/ReadingPaneToolbar.js","components/ReadingPane.js","components/MessageBox.js","App.js","serviceWorker.js","index.js","schemaFolders.js"],"names":["SearchBox","props","handleFilterTextChange","bind","e","this","filterTextChange","target","value","className","type","name","placeholder","filterText","onChange","Component","FolderNavigation","handleSetCurrentFolderID","id","setCurrentFolderID","folders","map","item","key","currentFolderID","onClick","messages","unread","total","ReadingPaneToolbar","handleClickFilters","filter","isMessageSelected","setState","isSelected","selectMessages","selectContainer","current","setTimeout","handleChangeCheckbox","setCheckbox","stateToolbarComponents","checkboxIsChecked","handleClickMoveto","folder","moveMessages","movetoContainer","React","createRef","elementsNavFilters","filterNames","elementsNavFolders","folderNames","folderName","close","messageOpenToolbar","select","disabled","displayedMessagesLength","checked","ref","move","ReadingPane","—ÅlickOnTableCheckBox","messageID","stopPropagation","selectMessage","state","message","isDisplayMessageBody","isOpenMessage","undefined","rowTable","index","toolbarOps","openMessage","style","isRead","fontWeight","from","subject","position","width","height","render","MessageBox","body","indexOf","src","maxWidth","alt","minWidth","controls","padding","href","rel","err","serverURL","App","setToolbarCheckboxState","isChecked","prevState","displayedMessages","forEach","toUpperCase","folderID","selectedMessage","storedMessages","updateFolders","updateDisplayedMessages","action","toLowerCase","nextIsOpenedMessage","itemMessages","isOpenedMessage","currentMessageID","itemMessage","itemFolder","error","isLoaded","result","schemaFolders","messageItem","prevProps","snapshot","json","length","data","children","jsonChild","domain","is_video","media","reddit_video","fallback_url","url","author","created_utc","title","_prevStateMessages","_newMessages","isIdEqual","push","fetch","then","res","updateStoredMessages","fetchData","timerID","setInterval","clearInterval","arrFolderNames","currentMessage","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7e52beb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './SearchBox.css';\r\n\r\nexport default class SearchBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n    }\r\n\r\n    handleFilterTextChange(e) {\r\n        this.props.filterTextChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"searchbox\" >   \r\n                <input\r\n                    type=\"text\"\r\n                    name=\"search\"\r\n                    placeholder=\"Search mail...\"\r\n                    value={this.props.filterText}\r\n                    onChange={this.handleFilterTextChange}\r\n                /> \r\n            </div> \r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './FolderNavigation.css';\r\n\r\nexport default class FolderNavigation extends Component {\r\n  \r\n  handleSetCurrentFolderID = (id) => {\r\n      this.props.setCurrentFolderID(id);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"folder-nav\">\r\n        {this.props.folders.map(item => {\r\n          return (\r\n            <div\r\n              key={item.id}\r\n              className={`folder-ntf${this.props.currentFolderID === item.id ? ' current' : ''}`}\r\n                onClick={() => this.handleSetCurrentFolderID(item.id)} >\r\n              <span className=\"folder-ntf__name\">{item.name}</span>\r\n              <span className=\"folder-ntf__unread\">{item.messages.unread > 0 ? item.messages.unread : false}</span>\r\n              <span className=\"folder-ntf__slash\">{item.messages.unread > 0 ? '/' : false}</span>\r\n              <span className=\"folder-ntf__total\">{item.messages.total > 0 ? item.messages.total : false}</span>\r\n            </div>\r\n          ); \r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './ReadingPaneToolbar.css';\r\n\r\nexport default class ReadingPaneToolbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.selectContainer = React.createRef();\r\n        this.movetoContainer = React.createRef();\r\n    }\r\n    //checkboxIsChecked\r\n    handleClickFilters = (filter) => {\r\n        if (this.props.isMessageSelected)\r\n            this.setState({isSelected: true})\r\n        else {\r\n            this.setState({isSelected: false});\r\n        }\r\n\r\n        this.props.selectMessages(filter);\r\n\r\n        const className = this.selectContainer.current.className;\r\n        this.selectContainer.current.className = 'invisible';\r\n        setTimeout(() => { this.selectContainer.current.className = className; }, 1000);\r\n    }\r\n\r\n    handleChangeCheckbox = () => {\r\n        this.props.setCheckbox(!this.props.stateToolbarComponents.checkboxIsChecked);\r\n        this.props.stateToolbarComponents.checkboxIsChecked ?\r\n            this.props.selectMessages('NONE') :\r\n            this.props.selectMessages('ALL'); \r\n    }\r\n\r\n    handleClickMoveto = (folder) => {\r\n        this.props.moveMessages(folder);\r\n        this.props.setCheckbox(false);\r\n\r\n        const className = this.movetoContainer.current.className;\r\n        this.movetoContainer.current.className = 'invisible';\r\n        setTimeout(() => { this.movetoContainer.current.className = className; }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const elementsNavFilters = this.props.filterNames.map((filter) =>\r\n            <span\r\n                key={filter}\r\n                onClick={() => this.handleClickFilters(filter)}>\r\n                {filter}\r\n            </span>\r\n        );\r\n        const elementsNavFolders = this.props.folderNames.map((folderName) =>\r\n            <span\r\n                key={folderName}\r\n                onClick={() => this.handleClickMoveto(folderName)}>\r\n                {folderName}\r\n            </span>\r\n        );\r\n            \r\n        return (\r\n            <div className={this.props.stateToolbarComponents.close ? 'reading-pane-tlbr center' : 'reading-pane-tlbr'} >\r\n                <div\r\n                    onClick={() => this.props.messageOpenToolbar('close')}\r\n                    className={this.props.stateToolbarComponents.close ? 'reading-pane-tlbr-close' : 'invisible'}>\r\n                    <i className=\"material-icons\">clear</i>\r\n                    <span>  CLOSE</span>\r\n                </div>\r\n                <div className={this.props.stateToolbarComponents.select ? 'checkbox-btn-dropdown' : 'invisible'}>\r\n                    <label className=\"checkbox\">\r\n                        <input \r\n                            disabled={this.props.displayedMessagesLength > 0 ? false : true}\r\n                            type=\"checkbox\"\r\n                            checked={this.props.stateToolbarComponents.checkboxIsChecked}\r\n                            onChange={this.handleChangeCheckbox}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                    <div className=\"btn-dropdown\">\r\n                        <button >\r\n                            <i className=\"material-icons\">arrow_drop_down</i>\r\n                        </button>\r\n                        <div className=\"dropdown\" ref={this.selectContainer}>\r\n                            {elementsNavFilters}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={this.props.stateToolbarComponents.move ? 'move-to' : 'invisible'}>\r\n                    <i className=\"material-icons\">folder_open</i>\r\n                    <span> MOVE TO</span>\r\n                    <div className=\"dropdown\" ref={this.movetoContainer}>\r\n                        {elementsNavFolders}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport './ReadingPane.css';\r\n\r\nexport default class ReadingPane extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: {},\r\n            isDisplayMessageBody: false\r\n        }\r\n    }\r\n\r\n    —ÅlickOnTableCheckBox = (e, messageID) => {\r\n        e.stopPropagation(); \r\n        this.props.selectMessage(messageID);\r\n    }\r\n\r\n    onChange() {\r\n        // We need this empty handler to suppress React warning:\r\n        // \"You provided a `checked` prop to a form field without an `onChange` handler.\r\n        // This will render a read-only field. If the field should be mutable use `defaultChecked`.\r\n        // Otherwise, set either `onChange` or `readOnly`\"\r\n      }\r\n\r\n    componentDidUpdate() {\r\n        let { isDisplayMessageBody } = this.state;\r\n        let { isOpenMessage, messageOpenToolbar } = this.props;\r\n\r\n        if (!isOpenMessage && isDisplayMessageBody) {\r\n            this.setState({\r\n                isDisplayMessageBody: false,\r\n                message: undefined\r\n            });\r\n        messageOpenToolbar('open');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { message, isDisplayMessageBody } = this.state;\r\n        let { messages } = this.props;\r\n        \r\n        let rowTable = messages.map((item, index) =>\r\n            <Fragment key={index}>\r\n                <tr\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        this.setState({\r\n                            message: item,\r\n                            isDisplayMessageBody: true\r\n                        });\r\n                        this.props.toolbarOps('READ_MESSAGE');\r\n                        this.props.openMessage('OPEN', item.id); } }\r\n                    >\r\n                    <td className=\"td1\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            key={item.id}\r\n                            checked={item.isSelected}\r\n                            onChange={() => this.onChange()}\r\n                            onClick={(e) => this.—ÅlickOnTableCheckBox(e, item.id)}\r\n                        />\r\n                    </td>\r\n                    <td className=\"td2\" style={item.isRead ? {fontWeight: 'normal'} : {fontWeight: 'bold'}}>{item.from}</td>\r\n                    <td className=\"td3\" style={item.isRead ? {fontWeight: 'normal'} : {fontWeight: 'bold'}}>{item.subject}</td>\r\n                </tr>\r\n            </Fragment>\r\n        );\r\n\r\n        return (\r\n            <div style={{position: 'relative', width: '100%', height: '100%'}}>\r\n                <div className=\"reading-pane\">\r\n                    <div className=\"message-pane\">\r\n                        <table id=\"myTable\">\r\n                            <tbody>\r\n                                {rowTable}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                {isDisplayMessageBody ? this.props.render(message): false}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './MessageBox.css';\r\n\r\nexport default class MessageBox extends Component {\r\n\r\n    render() {\r\n        const { openMessage } = this.props;\r\n        let body;\r\n        if (openMessage === undefined) return <div/>\r\n        else {\r\n            try {\r\n                if (openMessage.body !== null) {\r\n                    if (openMessage.body.indexOf('redd.it') !== -1 ) {\r\n                        if (openMessage.body.indexOf('jpg') !== -1 || openMessage.body.indexOf('png') !== -1  || openMessage.body.indexOf('gif') !== -1) {\r\n                            body = <img className=\"message-img\" src={openMessage.body} style={{maxWidth: '1000px'}} alt=\"Animal\" />;\r\n                        }\r\n                        else\r\n                            body = <video style={{maxWidth: '1000px', minWidth: '480px'}} controls>\r\n                                        <source src={openMessage.body} type=\"video/mp4\"/>\r\n                                            Your browser does not support HTML5 video.\r\n                                    </video>;\r\n                    }\r\n                    else\r\n                        body = <span style={{padding: '28px'}}><a href={openMessage.body} target=\"_blank\" rel=\"noopener noreferrer\">View post</a></span>\r\n                }\r\n                else\r\n                    body = <div/>\r\n            }\r\n            catch(err) {\r\n                body = <div/>;\r\n            }\r\n\r\n        return (\r\n            <div className=\"message-cntr\">\r\n                <div className=\"message-cntr-scroll\">\r\n                    <div className=\"message-tlbr\">\r\n                        <span style={{padding: '10px'}}>From: {this.props.openMessage.from}</span>\r\n                        <span style={{padding: '10px'}}>Subject: {this.props.openMessage.subject}</span>\r\n                    </div>\r\n                    <div className=\"message\">\r\n                        {body}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );}\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport SearchBox from './components/SearchBox';\r\nimport FolderNavigation from './components/FolderNavigation';\r\nimport ReadingPaneToolbar from './components/ReadingPaneToolbar';\r\nimport ReadingPane from './components/ReadingPane';\r\nimport MessageBox from './components/MessageBox';\r\n\r\nconst serverURL = `https://www.reddit.com/r/aww/new.json`\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            error: null,\r\n            isLoaded: false,\r\n            result: null,\r\n\r\n            //all received messages\r\n            storedMessages: [],\r\n            //messages depending on the selected folder and filter\r\n            displayedMessages: [],\r\n\r\n            //filter\r\n            filterText: '',\r\n            \r\n            //if at least one message is selected\r\n            isMessageSelected: false,\r\n\r\n            //container of all folders\r\n            folders: this.props.schemaFolders,\r\n            currentFolderID: 0,\r\n\r\n\r\n\r\n            stateToolbarComponents: {\r\n                checkboxIsChecked : false,\r\n                close: false,\r\n                select: true,\r\n                move: true\r\n            },\r\n\r\n            //to open a message\r\n            isOpenedMessage: false,\r\n            currentMessageID : null,\r\n            nextIsOpenedMessage: true\r\n        };\r\n    }\r\n\r\n    //update messages depending on the selected folder and filter\r\n    updateDisplayedMessages() {\r\n        this.setState((prevState) => {\r\n            let { storedMessages, filterText, displayedMessages, currentFolderID } = prevState;\r\n            displayedMessages = storedMessages.filter((messageItem) => {\r\n                if (messageItem.subject.toLowerCase().indexOf(filterText) === -1 &&\r\n                    messageItem.from.toLowerCase().indexOf(filterText) === -1)\r\n                    return false;\r\n                if (messageItem.folderID !== currentFolderID)\r\n                    return false;\r\n                return messageItem;\r\n            });\r\n            return {displayedMessages: displayedMessages};\r\n        });\r\n    }\r\n\r\n    //set toolbar's checkbox state\r\n    setToolbarCheckboxState = (isChecked) => {\r\n        this.setState((prevState) => {\r\n            return {stateToolbarComponents: {\r\n                ...prevState.stateToolbarComponents,\r\n                ...prevState.stateToolbarComponents.checkboxIsChecked = isChecked }}});\r\n    }\r\n\r\n    //set filter by words\r\n    filterTextChange = (filterText) => {\r\n        this.setState({ filterText: filterText });\r\n    }\r\n\r\n    //set current folder ID\r\n    setCurrentFolderID = (currentFolderID) => {\r\n        this.setState({ currentFolderID: currentFolderID });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.filterText !== this.state.filterText)\r\n            this.updateDisplayedMessages();\r\n        if (prevState.currentFolderID !== this.state.currentFolderID) {\r\n            this.updateDisplayedMessages();\r\n            this.selectMessages('UNSELECT_ALL');\r\n        }\r\n    }    \r\n\r\n    //select displayed message\r\n    selectMessage = (messageID) => {\r\n        this.setState((prevState) => {\r\n            prevState.displayedMessages.forEach((item) => {\r\n                if (item.id === messageID) {\r\n                    item.isSelected = !item.isSelected;\r\n                }\r\n            });\r\n            return { displayedMessages: prevState.displayedMessages };\r\n        });\r\n    }\r\n\r\n    //select multiple displayed messages\r\n    selectMessages = (filter) => {\r\n        this.setState((prevState) => {\r\n            switch (filter.toUpperCase()) {\r\n                case 'ALL':\r\n                    prevState.displayedMessages.forEach((message) => {\r\n                        if (message.folderID === prevState.currentFolderID)\r\n                            message.isSelected = true;\r\n                    });\r\n                    this.setToolbarCheckboxState(true);\r\n                    return {displayedMessages: prevState.displayedMessages};\r\n                case 'NONE':\r\n                    prevState.displayedMessages.forEach((message) => {\r\n                        if (message.folderID === prevState.currentFolderID)\r\n                            message.isSelected = false;\r\n                    });\r\n                    this.setToolbarCheckboxState(false);\r\n                    return {displayedMessages: prevState.displayedMessages};\r\n                case 'READ':\r\n                    prevState.displayedMessages.forEach((message) => {\r\n                        if (message.folderID === prevState.currentFolderID)\r\n                            message.isRead === true ? message.isSelected = true : message.isSelected = false;\r\n                    });\r\n                    this.setToolbarCheckboxState(false);\r\n                    return {displayedMessages: prevState.displayedMessages};\r\n                case 'UNREAD':\r\n                    prevState.displayedMessages.forEach((message) => {\r\n                        if (message.folderID === prevState.currentFolderID)\r\n                            message.isRead === false ? message.isSelected = true : message.isSelected = false;\r\n                    });\r\n                    this.setToolbarCheckboxState(false);\r\n                    return {displayedMessages: prevState.displayedMessages};\r\n                case 'UNSELECT_ALL':\r\n                    prevState.displayedMessages.forEach((message) => {\r\n                        message.isSelected = false;\r\n                    });\r\n                    return {displayedMessages: prevState.displayedMessages};\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    //move messages\r\n    moveMessages = (folderName) => {\r\n        this.setState((prevState) => {\r\n            for (let selectedMessage of prevState.displayedMessages) {\r\n                if (selectedMessage.isSelected) {\r\n                    for(let message of prevState.storedMessages) {\r\n                        if(selectedMessage.id === message.id) {\r\n                            for(let folder of prevState.folders) {\r\n                                if (folder.name === folderName) {\r\n                                    message.folderID = folder.id;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return {storedMessages: prevState.storedMessages} \r\n        });\r\n        this.selectMessages('UNSELECT_ALL');\r\n        this.updateFolders();\r\n        this.updateDisplayedMessages();\r\n    }\r\n\r\n    //show toolbar's control elements\r\n    toolbarOps = (action) => {\r\n        switch (action.toLowerCase()) {\r\n            case 'read_message':\r\n                this.setState({stateToolbarComponents: {checkboxIsChecked: false, close: true, select: false, move: false}});\r\n                break;\r\n            case 'list_messages':\r\n                this.setState({stateToolbarComponents: {checkboxIsChecked: false, close: false, select: true, move: true}});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    messageOpenToolbar = (action) => {\r\n        switch (action.toLowerCase()) {\r\n            case 'close':\r\n                this.setState({nextIsOpenedMessage: false});\r\n                break;\r\n                case 'open':\r\n                    this.setState({nextIsOpenedMessage: true});\r\n                    this.toolbarOps('list_messages');\r\n                    break;\r\n                default:\r\n                    break;\r\n        }\r\n    }\r\n\r\n    openMessage = (action, messageID) => {\r\n        this.setState((prevState) => {\r\n            if (action.toLowerCase() === 'open') {\r\n                for (let itemMessages of prevState.storedMessages) {\r\n                    if(messageID === itemMessages.id){\r\n                        itemMessages.isRead = true;\r\n                    }\r\n                }\r\n                return {isOpenedMessage: true, currentMessageID: messageID, storedMessages:prevState.storedMessages};\r\n            }\r\n            else \r\n                return {isOpenedMessage: false, currentMessageID: messageID} ;\r\n        });\r\n        this.updateFolders();\r\n        this.updateDisplayedMessages();\r\n    }\r\n\r\n    //set updated messages state\r\n    updateStoredMessages(json) {\r\n        //if message state is empty\r\n        if (this.state.storedMessages.length === 0) {\r\n            this.setState({\r\n                storedMessages: json.data.children.map((jsonChild, index) => {\r\n                    let body = null;\r\n                    try {\r\n                        if (jsonChild.data.domain.indexOf('redd.it') !== -1 ) {\r\n                            if (jsonChild.data.is_video) {\r\n                                body = jsonChild.data.media.reddit_video.fallback_url\r\n                            }\r\n                            else\r\n                                body = jsonChild.data.url\r\n                        }\r\n                        else\r\n                            body = jsonChild.data.url\r\n                    }\r\n                    catch(err) {\r\n                        body = null;\r\n                    }\r\n                    return {\r\n                        id: jsonChild.data.id,\r\n                        folderID: 0,\r\n                        from: `${jsonChild.data.author.toLowerCase()}@${jsonChild.data.domain}`,\r\n                        created_utc: `${jsonChild.data.created_utc}000`,\r\n                        subject: jsonChild.data.title,\r\n                        body: body,\r\n                        isSelected: false,\r\n                        isRead: false\r\n                    }\r\n                })\r\n            });\r\n        }\r\n        //if messages already exist\r\n        else {\r\n            let _prevStateMessages = this.state.storedMessages;\r\n            let _newMessages = [];\r\n            json.data.children.forEach((jsonChild) => {\r\n                let isIdEqual = false;\r\n                for (let item of _prevStateMessages) {\r\n                    if (item.id === jsonChild.data.id) {\r\n                        isIdEqual = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isIdEqual) {\r\n                    let body = null;\r\n                    try {\r\n                        if (jsonChild.data.domain.indexOf('redd.it') !== -1 ) {\r\n                            if (jsonChild.data.is_video) {\r\n                                body = jsonChild.data.media.reddit_video.fallback_url\r\n                            }\r\n                            else\r\n                                body = jsonChild.data.url\r\n                        }\r\n                        else\r\n                            body = jsonChild.data.url\r\n                    }\r\n                    catch(err) {\r\n                        body = null;\r\n                    }\r\n\r\n                    _newMessages.push(\r\n                        {\r\n                            id: jsonChild.data.id,\r\n                            folderID: 0,\r\n                            from: `${jsonChild.data.author.toLowerCase()}@${jsonChild.data.domain}`,\r\n                            created_utc: `${jsonChild.data.created_utc}000`,\r\n                            subject: jsonChild.data.title,\r\n                            body: body,\r\n                            isSelected: false,\r\n                            isRead: false\r\n                        }\r\n                    );\r\n                    isIdEqual = false;\r\n                }\r\n            });\r\n            //if new messages are received\r\n            if (_newMessages.length) {\r\n                this.setState({\r\n                    storedMessages: [..._newMessages, ..._prevStateMessages]\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    //set folders to current value (total, unread)\r\n    updateFolders = () => {\r\n        this.setState((prevState) => {\r\n            prevState.folders.forEach((folder) => {\r\n                folder.messages.total = 0;\r\n                folder.messages.unread = 0;\r\n            });\r\n            for (let itemMessage of prevState.storedMessages) {\r\n                //number of unread and total messages\r\n                if (itemMessage.isRead === false) {\r\n                    for (let itemFolder of prevState.folders) {\r\n                        if (itemMessage.folderID === itemFolder.id) {\r\n                            itemFolder.messages.unread += 1;\r\n                            itemFolder.messages.total += 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                //number of total messages\r\n                else {\r\n                    for (let itemFolder of prevState.folders) {\r\n                        if (itemMessage.folderID === itemFolder.id) {\r\n                            itemFolder.messages.total += 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                folders: prevState.folders\r\n            }\r\n        });\r\n    }\r\n\r\n    fetchData(url) {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then((result) => {\r\n                this.updateStoredMessages(result);\r\n                this.updateDisplayedMessages();\r\n                this.updateFolders();\r\n                this.setState({\r\n                    isLoaded: true\r\n                });\r\n            },\r\n            (error) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error\r\n                });\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(serverURL);\r\n        this.timerID = setInterval(\r\n            () => this.fetchData(serverURL),\r\n            10000\r\n          );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n        this.timerID = null;\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded } = this.state;\r\n\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            \r\n        const { storedMessages, displayedMessages } = this.state;\r\n\r\n        let openMessage = [];\r\n        let readMessage = {};\r\n        if (this.state.isOpenedMessage) {\r\n            openMessage = this.state.displayedMessages.filter(value => {\r\n                return value.id === this.state.currentMessageID;\r\n            });\r\n            openMessage = openMessage[0];\r\n            readMessage = <MessageBox openMessage={openMessage} />\r\n        }\r\n        else\r\n            readMessage = <div/>;\r\n\r\n\r\n        let arrFolderNames = [];\r\n        this.state.folders.forEach(folder => {\r\n            if (folder.id !== this.state.currentFolderID)\r\n                arrFolderNames.push(folder.name);\r\n        });\r\n\r\n        const arrFilterNames =  ['All', 'None', 'Read', 'Unread'];\r\n\r\n        return (\r\n            <div className=\"main\">\r\n                <header>\r\n                    <div className=\"head\">\r\n                        <SearchBox\r\n                            filterText={this.state.filterText}\r\n                            filterTextChange={this.filterTextChange}\r\n                        />\r\n                    </div>\r\n                </header>\r\n                <section>\r\n                    <div className=\"body\">\r\n                        <div className=\"side\">\r\n                            <FolderNavigation\r\n                                folders={this.state.folders}\r\n                                setCurrentFolderID={this.setCurrentFolderID}\r\n                                currentFolderID={this.state.currentFolderID}\r\n                            />\r\n                        </div>\r\n                        <div className=\"wall\">\r\n                            <div className=\"wall-toolbar\">\r\n                                <ReadingPaneToolbar\r\n                                    setCheckbox={this.setToolbarCheckboxState}\r\n                                    folderNames={arrFolderNames}\r\n                                    filterNames={arrFilterNames}\r\n                                    selectMessages={this.selectMessages}\r\n                                    moveMessages={this.moveMessages}\r\n                                    stateToolbarComponents={this.state.stateToolbarComponents}\r\n                                    messageOpenToolbar={this.messageOpenToolbar}\r\n                                    displayedMessagesLength={this.state.displayedMessages.length}\r\n                                />\r\n                            </div>\r\n                            <div className=\"wall-feed\">\r\n                                <ReadingPane\r\n                                    messages={this.state.displayedMessages}\r\n                                    selectMessage={this.selectMessage}\r\n                                    openMessage={this.openMessage}\r\n                                    toolbarOps={this.toolbarOps}\r\n                                    messageOpenToolbar={this.messageOpenToolbar}\r\n                                    isOpenMessage={this.state.nextIsOpenedMessage}\r\n                                    render={currentMessage => (<MessageBox openMessage={currentMessage} />)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            \r\n            );\r\n        }\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport schemaFolders from './schemaFolders';\n\nReactDOM.render(<App\n    schemaFolders={schemaFolders} />,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n","export default [\r\n    {\r\n        id: 0,\r\n        name: \"Inbox\",\r\n        messages: {\r\n            total: 0,\r\n            unread: 0\r\n        }\r\n    },\r\n    {\r\n        id: 10001,\r\n        name: \"Sent\",\r\n        messages: {\r\n            total: 0,\r\n            unread: 0\r\n        }\r\n    },    \r\n    {\r\n        id: 10002,\r\n        name: \"Spam\",\r\n        messages: {\r\n            total: 0,\r\n            unread: 0\r\n        }\r\n    },    \r\n    {\r\n        id: 10003,\r\n        name: \"Trash\",\r\n        messages: {\r\n            total: 0,\r\n            unread: 0\r\n        }\r\n    }\r\n]"],"sourceRoot":""}